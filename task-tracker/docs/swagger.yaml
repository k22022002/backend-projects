basePath: /
definitions:
  entity.Task:
    properties:
      createdAt:
        type: string
      description:
        type: string
      id:
        type: integer
      status:
        type: string
      updatedAt:
        type: string
      user_id:
        type: integer
    type: object
  entity.User:
    properties:
      id:
        type: integer
      password:
        type: string
      username:
        type: string
    type: object
  system.RateLimitStatus:
    properties:
      remaining:
        type: integer
      reset:
        description: seconds until reset
        type: integer
    type: object
host: localhost:8080
info:
  contact:
    email: contact@example.com
    name: G G Dev Team
  description: REST API for task tracking with JWT authentication
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Task Tracker API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: User credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entity.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: User login
      tags:
      - auth
  /rate-limit:
    get:
      description: Return remaining requests and reset time
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/system.RateLimitStatus'
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Get current rate limit status
      tags:
      - Rate Limit
  /register:
    post:
      consumes:
      - application/json
      description: Register a new account with username and password
      parameters:
      - description: User credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entity.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: Register new user
      tags:
      - auth
  /tasks:
    get:
      consumes:
      - application/json
      description: Retrieve tasks for the authenticated user. Supports filtering by
        status and pagination.
      parameters:
      - description: Filter by task status (todo|in-progress|done)
        in: query
        name: status
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Search by description
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Task'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get all tasks
      tags:
      - tasks
    post:
      consumes:
      - application/json
      description: Create a task for the authenticated user
      parameters:
      - description: Task to create
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/entity.Task'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.Task'
        "400":
          description: Invalid request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create a new task
      tags:
      - tasks
  /tasks/{id}:
    delete:
      consumes:
      - application/json
      description: Delete task by ID
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No content
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Task not found
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete a task
      tags:
      - tasks
    get:
      consumes:
      - application/json
      description: Retrieve a single task by its ID
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Task'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Task not found
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get a task by ID
      tags:
      - tasks
    put:
      consumes:
      - application/json
      description: Update task fields by ID
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated task
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/entity.Task'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Task'
        "400":
          description: Invalid request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Task not found
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update a task
      tags:
      - tasks
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
